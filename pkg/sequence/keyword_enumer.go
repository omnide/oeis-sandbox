// Code generated by "enumer -type=Keyword -json -text -yaml -transform=lower -trimprefix=Keyword"; DO NOT EDIT.

package sequence

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _KeywordName = "basebrefchangedcofrconscoredeaddumbdupeeasyeigenfinifracfullhardhearlooklessmoremultnewnicenonnobscprobationsigntabftablunedwalkword"

var _KeywordIndex = [...]uint8{0, 4, 8, 15, 19, 23, 27, 31, 35, 39, 43, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 87, 91, 95, 99, 108, 112, 116, 120, 124, 128, 132}

const _KeywordLowerName = "basebrefchangedcofrconscoredeaddumbdupeeasyeigenfinifracfullhardhearlooklessmoremultnewnicenonnobscprobationsigntabftablunedwalkword"

func (i Keyword) String() string {
	if i >= Keyword(len(_KeywordIndex)-1) {
		return fmt.Sprintf("Keyword(%d)", i)
	}
	return _KeywordName[_KeywordIndex[i]:_KeywordIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _KeywordNoOp() {
	var x [1]struct{}
	_ = x[KeywordBase-(0)]
	_ = x[KeywordBref-(1)]
	_ = x[KeywordChanged-(2)]
	_ = x[KeywordCofr-(3)]
	_ = x[KeywordCons-(4)]
	_ = x[KeywordCore-(5)]
	_ = x[KeywordDead-(6)]
	_ = x[KeywordDumb-(7)]
	_ = x[KeywordDupe-(8)]
	_ = x[KeywordEasy-(9)]
	_ = x[KeywordEigen-(10)]
	_ = x[KeywordFini-(11)]
	_ = x[KeywordFrac-(12)]
	_ = x[KeywordFull-(13)]
	_ = x[KeywordHard-(14)]
	_ = x[KeywordHear-(15)]
	_ = x[KeywordLook-(16)]
	_ = x[KeywordLess-(17)]
	_ = x[KeywordMore-(18)]
	_ = x[KeywordMult-(19)]
	_ = x[KeywordNew-(20)]
	_ = x[KeywordNice-(21)]
	_ = x[KeywordNonn-(22)]
	_ = x[KeywordObsc-(23)]
	_ = x[KeywordProbation-(24)]
	_ = x[KeywordSign-(25)]
	_ = x[KeywordTabf-(26)]
	_ = x[KeywordTabl-(27)]
	_ = x[KeywordUned-(28)]
	_ = x[KeywordWalk-(29)]
	_ = x[KeywordWord-(30)]
}

var _KeywordValues = []Keyword{KeywordBase, KeywordBref, KeywordChanged, KeywordCofr, KeywordCons, KeywordCore, KeywordDead, KeywordDumb, KeywordDupe, KeywordEasy, KeywordEigen, KeywordFini, KeywordFrac, KeywordFull, KeywordHard, KeywordHear, KeywordLook, KeywordLess, KeywordMore, KeywordMult, KeywordNew, KeywordNice, KeywordNonn, KeywordObsc, KeywordProbation, KeywordSign, KeywordTabf, KeywordTabl, KeywordUned, KeywordWalk, KeywordWord}

var _KeywordNameToValueMap = map[string]Keyword{
	_KeywordName[0:4]:          KeywordBase,
	_KeywordLowerName[0:4]:     KeywordBase,
	_KeywordName[4:8]:          KeywordBref,
	_KeywordLowerName[4:8]:     KeywordBref,
	_KeywordName[8:15]:         KeywordChanged,
	_KeywordLowerName[8:15]:    KeywordChanged,
	_KeywordName[15:19]:        KeywordCofr,
	_KeywordLowerName[15:19]:   KeywordCofr,
	_KeywordName[19:23]:        KeywordCons,
	_KeywordLowerName[19:23]:   KeywordCons,
	_KeywordName[23:27]:        KeywordCore,
	_KeywordLowerName[23:27]:   KeywordCore,
	_KeywordName[27:31]:        KeywordDead,
	_KeywordLowerName[27:31]:   KeywordDead,
	_KeywordName[31:35]:        KeywordDumb,
	_KeywordLowerName[31:35]:   KeywordDumb,
	_KeywordName[35:39]:        KeywordDupe,
	_KeywordLowerName[35:39]:   KeywordDupe,
	_KeywordName[39:43]:        KeywordEasy,
	_KeywordLowerName[39:43]:   KeywordEasy,
	_KeywordName[43:48]:        KeywordEigen,
	_KeywordLowerName[43:48]:   KeywordEigen,
	_KeywordName[48:52]:        KeywordFini,
	_KeywordLowerName[48:52]:   KeywordFini,
	_KeywordName[52:56]:        KeywordFrac,
	_KeywordLowerName[52:56]:   KeywordFrac,
	_KeywordName[56:60]:        KeywordFull,
	_KeywordLowerName[56:60]:   KeywordFull,
	_KeywordName[60:64]:        KeywordHard,
	_KeywordLowerName[60:64]:   KeywordHard,
	_KeywordName[64:68]:        KeywordHear,
	_KeywordLowerName[64:68]:   KeywordHear,
	_KeywordName[68:72]:        KeywordLook,
	_KeywordLowerName[68:72]:   KeywordLook,
	_KeywordName[72:76]:        KeywordLess,
	_KeywordLowerName[72:76]:   KeywordLess,
	_KeywordName[76:80]:        KeywordMore,
	_KeywordLowerName[76:80]:   KeywordMore,
	_KeywordName[80:84]:        KeywordMult,
	_KeywordLowerName[80:84]:   KeywordMult,
	_KeywordName[84:87]:        KeywordNew,
	_KeywordLowerName[84:87]:   KeywordNew,
	_KeywordName[87:91]:        KeywordNice,
	_KeywordLowerName[87:91]:   KeywordNice,
	_KeywordName[91:95]:        KeywordNonn,
	_KeywordLowerName[91:95]:   KeywordNonn,
	_KeywordName[95:99]:        KeywordObsc,
	_KeywordLowerName[95:99]:   KeywordObsc,
	_KeywordName[99:108]:       KeywordProbation,
	_KeywordLowerName[99:108]:  KeywordProbation,
	_KeywordName[108:112]:      KeywordSign,
	_KeywordLowerName[108:112]: KeywordSign,
	_KeywordName[112:116]:      KeywordTabf,
	_KeywordLowerName[112:116]: KeywordTabf,
	_KeywordName[116:120]:      KeywordTabl,
	_KeywordLowerName[116:120]: KeywordTabl,
	_KeywordName[120:124]:      KeywordUned,
	_KeywordLowerName[120:124]: KeywordUned,
	_KeywordName[124:128]:      KeywordWalk,
	_KeywordLowerName[124:128]: KeywordWalk,
	_KeywordName[128:132]:      KeywordWord,
	_KeywordLowerName[128:132]: KeywordWord,
}

var _KeywordNames = []string{
	_KeywordName[0:4],
	_KeywordName[4:8],
	_KeywordName[8:15],
	_KeywordName[15:19],
	_KeywordName[19:23],
	_KeywordName[23:27],
	_KeywordName[27:31],
	_KeywordName[31:35],
	_KeywordName[35:39],
	_KeywordName[39:43],
	_KeywordName[43:48],
	_KeywordName[48:52],
	_KeywordName[52:56],
	_KeywordName[56:60],
	_KeywordName[60:64],
	_KeywordName[64:68],
	_KeywordName[68:72],
	_KeywordName[72:76],
	_KeywordName[76:80],
	_KeywordName[80:84],
	_KeywordName[84:87],
	_KeywordName[87:91],
	_KeywordName[91:95],
	_KeywordName[95:99],
	_KeywordName[99:108],
	_KeywordName[108:112],
	_KeywordName[112:116],
	_KeywordName[116:120],
	_KeywordName[120:124],
	_KeywordName[124:128],
	_KeywordName[128:132],
}

// KeywordString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func KeywordString(s string) (Keyword, error) {
	if val, ok := _KeywordNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _KeywordNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Keyword values", s)
}

// KeywordValues returns all values of the enum
func KeywordValues() []Keyword {
	return _KeywordValues
}

// KeywordStrings returns a slice of all String values of the enum
func KeywordStrings() []string {
	strs := make([]string, len(_KeywordNames))
	copy(strs, _KeywordNames)
	return strs
}

// IsAKeyword returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Keyword) IsAKeyword() bool {
	for _, v := range _KeywordValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Keyword
func (i Keyword) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Keyword
func (i *Keyword) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Keyword should be a string, got %s", data)
	}

	var err error
	*i, err = KeywordString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Keyword
func (i Keyword) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Keyword
func (i *Keyword) UnmarshalText(text []byte) error {
	var err error
	*i, err = KeywordString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for Keyword
func (i Keyword) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Keyword
func (i *Keyword) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = KeywordString(s)
	return err
}
